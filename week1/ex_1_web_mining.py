# -*- coding: utf-8 -*-
"""ex_1_web_mining.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14f4jQvGmn-lFRRdM7cfi_FR5tRPe8ybT
"""

import requests as req
from bs4 import BeautifulSoup as bs
import lxml

def init_url():
  url = 'https://aliceinwonderland.fandom.com/wiki/Alice_in_Wonderland_Wiki'
  return url


def books():
  soup = bs(req.get(init_url()).text, 'lxml')
  book_titles = soup.find('a', class_ = 'wds-dropdown-level-nested__toggle').find_parent('li').find('div', class_='wds-is-not-scrollable wds-dropdown-level-nested__content').find_all('span')
  books_list = [title.text for title in book_titles]

  return books_list

def poems():
  soup = bs(req.get(init_url()).text, 'lxml')
  poem_toggle = soup.find('span', string = 'Canon poems')
  poem_div = poem_toggle.find_parent('a').find_parent('li').find('div', class_ = 'wds-is-not-scrollable')
  poem_links = poem_div.find_all('a')

  poems_list = [(link.find('span').text, link.get('href')) for link in poem_links]

  return poems_list

def poem_title_text(poemlist, n):
    """
    Extract the title and text of a poem given its index in the poemlist.
    Gets all paragraphs after h2 that contain italicized text (which indicates poem content).

    Args:
        poemlist: List of tuples containing (poem_title, poem_url)
        n: Index of the poem to extract

    Returns:
        tuple: (poem_title, poem_text)
    """
    from bs4 import BeautifulSoup
    import requests

    # Get the poem title and URL from the list
    if n >= len(poemlist):
        raise IndexError("Poem index out of range")

    poem_title, poem_url = poemlist[n]

    # Fetch the poem page
    response = requests.get(poem_url)
    soup = BeautifulSoup(response.text, 'lxml')

    # Find all h2 headings
    h2_tags = soup.find_all('h2')

    # Initialize poem text
    poem_text = ""

    # Look through each h2 tag
    for h2 in h2_tags:
        # Get all paragraph siblings after h2
        next_elem = h2.find_next_sibling()
        while next_elem and next_elem.name != 'h2':
            if next_elem.name == 'p':
                # Check if paragraph contains italicized text (poem content)
                if next_elem.find('i'):
                    # Process each element in the paragraph
                    for element in next_elem.children:
                        if element.name == 'br':
                            poem_text += '\n'
                        else:
                            # Get the text, regardless of whether it's in <i> tags
                            text = element.get_text(strip=True)
                            if text:
                                poem_text += text
                    poem_text += '\n'  # Add newline after each paragraph
            next_elem = next_elem.find_next_sibling()

    # Clean up the final text
    poem_text = poem_text.strip()

    return (poem_title, poem_text)